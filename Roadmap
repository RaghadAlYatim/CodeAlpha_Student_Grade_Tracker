# Students Grade Tracker Website

# 1. Project Overview

The Student Grade Tracker is a full-stack web application designed to help students monitor their academic progress effectively. Students can log in, input grades for their enrolled courses, and view detailed insights such as individual course grades, overall averages, and grade trends over time. The system aims to provide a user-friendly interface with secure authentication and seamless data management.

# 2. Objectives

-Core Features:

User authentication (signup, login, password reset).

Dashboard displaying enrolled courses and corresponding grades.

Input system for students to add or update grades.

Automatic calculation of average grades (overall and per course).

Data visualization (e.g., grade trends using graphs/charts).

-Additional Features (Optional):

Role-based access (e.g., Admin for managing courses/students).

Grade notifications via email or SMS.

Export grades as downloadable reports (PDF/CSV).

# 3. Tech Stack

-Frontend

Framework: React.js

Styling: Tailwind CSS or Material UI

Charts: Chart.js or ApexCharts

-Backend

Framework: Node.js with Express.js

Authentication: JSON Web Tokens (JWT)

Data Validation: JOI or Yup

-Database

Primary Options: MongoDB (NoSQL) or PostgreSQL (SQL)

Hosted on: MongoDB Atlas or AWS RDS

-Deployment

Frontend: Vercel or Netlify

Backend: Render or Heroku

Database: Cloud-hosted services

# 4. System Architecture

-Frontend

Components:

Navbar

Login/Sign-up forms

Dashboard (Grades and Trends)

Grade Input Form

Profile/Settings

-Backend

. REST API Endpoints:

Auth: /auth/login, /auth/signup, /auth/reset

Grades: /grades/add, /grades/view, /grades/update, /grades/delete

Courses: /courses/view

Students: /students/view

. Database Schema

Students

id: Unique identifier

name: Full name

email: Email address

password: Hashed password

courses_enrolled: List of course IDs

. Courses

id: Unique identifier

name: Course title

credits: Credit hours

. Grades

student_id: Linked to a student

course_id: Linked to a course

grade: Numerical or letter grade

date: Date of entry

# 5. Development Roadmap

Week 1: 

Initialization and Authentication

Set up project repositories and initialize frontend/backend.

Design and implement database schemas.

Build user authentication with JWT (signup, login, password reset).

Test authentication APIs.

Week 2:

Core Features

Develop the dashboard UI for students.

Create API endpoints for adding, updating, and viewing grades.

Set up database queries to calculate grade averages.

Connect frontend forms with backend APIs.

Week 3:

Data Visualization and Testing

Integrate charts for grade trends (e.g., per subject).

Perform frontend and backend integration testing.

Fix bugs and improve API performance.

Week 4: 

Deployment and Documentation

Deploy frontend and backend to hosting platforms.

Finalize user manual/documentation for usage.

Gather feedback and make final adjustments.

# 6. Expected Outcomes

A fully functional web application where students can log in, input their grades, and track their academic performance.

Secure authentication and efficient data handling.

Intuitive UI with responsive design.

Basic visualizations to enhance grade insights.
